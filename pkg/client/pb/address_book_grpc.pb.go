// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: pkg/client/pb/address_book.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AddressBook_CreateContact_FullMethodName = "/pb.AddressBook/CreateContact"
	AddressBook_ReadContact_FullMethodName   = "/pb.AddressBook/ReadContact"
	AddressBook_UpdateContact_FullMethodName = "/pb.AddressBook/UpdateContact"
	AddressBook_DeleteContact_FullMethodName = "/pb.AddressBook/DeleteContact"
)

// AddressBookClient is the client API for AddressBook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressBookClient interface {
	CreateContact(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactResponse, error)
	ReadContact(ctx context.Context, in *ReadContactRequest, opts ...grpc.CallOption) (*ContactResponse, error)
	UpdateContact(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactResponse, error)
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*ContactResponse, error)
}

type addressBookClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressBookClient(cc grpc.ClientConnInterface) AddressBookClient {
	return &addressBookClient{cc}
}

func (c *addressBookClient) CreateContact(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactResponse, error) {
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, AddressBook_CreateContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressBookClient) ReadContact(ctx context.Context, in *ReadContactRequest, opts ...grpc.CallOption) (*ContactResponse, error) {
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, AddressBook_ReadContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressBookClient) UpdateContact(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactResponse, error) {
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, AddressBook_UpdateContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressBookClient) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*ContactResponse, error) {
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, AddressBook_DeleteContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressBookServer is the server API for AddressBook service.
// All implementations must embed UnimplementedAddressBookServer
// for forward compatibility
type AddressBookServer interface {
	CreateContact(context.Context, *ContactRequest) (*ContactResponse, error)
	ReadContact(context.Context, *ReadContactRequest) (*ContactResponse, error)
	UpdateContact(context.Context, *ContactRequest) (*ContactResponse, error)
	DeleteContact(context.Context, *DeleteContactRequest) (*ContactResponse, error)
	mustEmbedUnimplementedAddressBookServer()
}

// UnimplementedAddressBookServer must be embedded to have forward compatible implementations.
type UnimplementedAddressBookServer struct {
}

func (UnimplementedAddressBookServer) CreateContact(context.Context, *ContactRequest) (*ContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedAddressBookServer) ReadContact(context.Context, *ReadContactRequest) (*ContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadContact not implemented")
}
func (UnimplementedAddressBookServer) UpdateContact(context.Context, *ContactRequest) (*ContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContact not implemented")
}
func (UnimplementedAddressBookServer) DeleteContact(context.Context, *DeleteContactRequest) (*ContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedAddressBookServer) mustEmbedUnimplementedAddressBookServer() {}

// UnsafeAddressBookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressBookServer will
// result in compilation errors.
type UnsafeAddressBookServer interface {
	mustEmbedUnimplementedAddressBookServer()
}

func RegisterAddressBookServer(s grpc.ServiceRegistrar, srv AddressBookServer) {
	s.RegisterService(&AddressBook_ServiceDesc, srv)
}

func _AddressBook_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressBookServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressBook_CreateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressBookServer).CreateContact(ctx, req.(*ContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressBook_ReadContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressBookServer).ReadContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressBook_ReadContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressBookServer).ReadContact(ctx, req.(*ReadContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressBook_UpdateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressBookServer).UpdateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressBook_UpdateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressBookServer).UpdateContact(ctx, req.(*ContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressBook_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressBookServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressBook_DeleteContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressBookServer).DeleteContact(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressBook_ServiceDesc is the grpc.ServiceDesc for AddressBook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressBook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AddressBook",
	HandlerType: (*AddressBookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContact",
			Handler:    _AddressBook_CreateContact_Handler,
		},
		{
			MethodName: "ReadContact",
			Handler:    _AddressBook_ReadContact_Handler,
		},
		{
			MethodName: "UpdateContact",
			Handler:    _AddressBook_UpdateContact_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _AddressBook_DeleteContact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/client/pb/address_book.proto",
}
